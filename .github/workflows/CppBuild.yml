name: C++ CI
on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest (MSVC)",
            os: windows-latest,
            build_type: "Release", cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
        }
        - {
            name: "Ubuntu 18.04 (GCC)",
            os: ubuntu-18.04,
            build_type: "Release", cc: "gcc-9", cxx: "g++-9"
          }
        - {
            name: "Ubuntu 18.04 (Clang)",
            os: ubuntu-18.04,
            build_type: "Release", cc: "clang", cxx: "clang++"
          }

    env:
      # compilers
      CC: ${{ matrix.config.cc }}
      CXX: ${{ matrix.config.cxx }}

      # ninja build, essentially a GNU make alternative.
      NINJA_VERSION: v1.10.0
      NINJA_STATUS: "[%f/%t %o/sec]"

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2.3.1
        with:
          submodules: "recursive"

      - name: Get Build Dependencies
        shell: cmake -P {0}
        run: |
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(NINJA_SUFFIX "win.zip")
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            set(NINJA_SUFFIX "linux.zip")
          endif()
          execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory BUILD_TOOLS)
          # download ninja.
          file(DOWNLOAD "https://github.com/ninja-build/ninja/releases/download/$ENV{NINJA_VERSION}/ninja-${NINJA_SUFFIX}" ./ninja.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar -xvf ../ninja.zip WORKING_DIRECTORY ./BUILD_TOOLS)
          message("::add-path::$ENV{GITHUB_WORKSPACE}/BUILD_TOOLS")
          if (NOT "${{ runner.os }}" STREQUAL "Windows")
            execute_process(COMMAND chmod +x ninja WORKING_DIRECTORY ./BUILD_TOOLS)
          endif()
      - name: Configure CMake
        shell: cmake -P {0}
        run: |
          if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
            execute_process(COMMAND "${{ matrix.config.environment_script }}" && set OUTPUT_FILE environment_script_output.txt)
            file(STRINGS environment_script_output.txt output_lines)
            foreach(line IN LISTS output_lines)
              if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
              endif()
            endforeach()
          endif()
          execute_process(COMMAND ${CMAKE_COMMAND} 
            -S.
            -BBuild
            -GNinja
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Base setup and configuration failed.")
          endif()
      - name: Build Project
        shell: cmake -P {0}
        run: |
          if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
            execute_process(COMMAND "${{ matrix.config.environment_script }}" && set OUTPUT_FILE environment_script_output.txt)
            file(STRINGS environment_script_output.txt output_lines)
            foreach(line IN LISTS output_lines)
              if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
              endif()
            endforeach()
          endif()
          execute_process(COMMAND ${CMAKE_COMMAND} --build Build RESULT_VARIABLE result)
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "CMake Build command failed.")
          endif()
      - name: Test Project
        run: cd Build/Phoenix/Server && ./PhoenixServer
